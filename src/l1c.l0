/* -*- Mode: javascript; indent-tabs-mode: nil; tab-width: 4 -*- */
/* vi: set ts=4 sw=4 expandtab: (add to ~/.vimrc: set modeline modelines=5) */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

public function compileHook (s:String)
{
    var t0 = new Date;
    var maker = new SwfMaker ();
    var bytes = ESC::compileStringToBytes (s);
    var bytes = maker.makeSwf ([bytes], null);
    print (bytes.length + " bytes in " + (new Date() - t0) + " ms");
    return bytes;
}


{
    let total_frontend = 0;
    let total_backend = 0;

    let before = new Date();

    let files = ESC::filterCommandLine(Util::commandLineArguments());

    let prof = ESC::flags.profile_compiler;

    if (prof)
        ESC::startProfile();

    for ( let i=0, limit=files.length ; i < limit ; i++ ) {
        let fname = files[i];
        let [parse,cogen,[bytes,karyotype]] = ESC::compileFileToBytes (fname);
        Util::writeBytesToFile(bytes, fname + ".abc");
        //        Util::writeStringToFile (karyotype,fname+".karyotype");

        total_frontend += parse;
        total_backend += cogen;
        print (fname);
        print ("  Scan+parse:  " + parse + " ms");
        print ("  Cogen:       " + cogen + " ms");

        /*
        var abc = Abc::parseAbcFile(new ABCByteStream(bytes));

        print ("encoding karyotype file, bytes.length="+abc.bodies.length);
        var tx = karyoFromAbc(fname, abc);
        Util::writeStringToFile (tx,fname+".karyotype");
        print (fname+".karyotype.txt, "+tx.length+" chars written");
        */

        // This is a hack.  The profiler needs to be callback-based; the
        // snapshot is captured so that the profiler won't lose data.
        if (prof)
            ESC::snapshotProfile();

    }

    let after = new Date();

    if (files.length > 1) {
        print("");
        print("Total time: " + (after - before));
        print("Front end:  " + total_frontend);
        print("Back end:   " + total_backend);
    }

    if (prof) {
        ESC::stopProfile();
        ESC::dumpProfile("esc.profile");
    }
}

// chr - CHRNAME CHRLABEL START END COLOR
//      "       method#  0 size "

function karyoFromAbc(fname, abc) {
    var chr_count = 1;
    var ticket = 1;
    var out_str = "";
    var code_size = 0;
    var kname = fname.substring(fname.lastIndexOf("/")+1, fname.lastIndexOf("."));
    var start;
    var end = 0;

    for each (body in abc.bodies) {
        var band_str = "";
        /*
        for each (insn in body.code) {            
            var bandlabel = ticket++;
            var bandname = "b"+bandlabel;
            start = end;
            end = end + body.code.length;
            var color = ticket % 2 ? "grey" : "black";
            band_str += "\nband";
            band_str += " " + chrname;
            band_str += " " + bandname;
            band_str += " " + bandlabel;
            band_str += " " + start;
            band_str += " " + end;
            band_str += " " + color;
        }
        */

        var chr_str = "";
        var chrlabel = chr_count++;
        var chrname = kname+"_"+chrlabel;
        var start = 0;
        var end = body.code.length; //end = end + body.code.length;
        var color = "spectral-5-div-"+(chr_count%5+1);
        chr_str += "\nchr -";
        chr_str += " " + chrname;
        chr_str += " " + chrname;
        chr_str += " " + start;
        chr_str += " " + end;
        chr_str += " " + color;

        out_str += "\n" + chr_str + band_str;
    }
    return out_str;
}
